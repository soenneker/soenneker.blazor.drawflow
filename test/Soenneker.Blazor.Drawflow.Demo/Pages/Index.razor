@page "/"
@using Microsoft.Extensions.Logging
@using Soenneker.Blazor.Drawflow.Options
@using Soenneker.Blazor.Drawflow
@using System.Text.Json
@using Soenneker.Blazor.Drawflow.Dtos
@using Soenneker.Extensions.Enumerable
@inject ILogger<Index> Logger

<Layout>
    <Bar Background="Background.Dark" ThemeContrast="ThemeContrast.Dark" Class="shadow-sm px-4" Style="height:64px;">
        <BarBrand>
            <span class="fw-bold fs-4">Drawflow Blazor Demo</span>
        </BarBrand>
        <BarEnd>
            <Link To="https://github.com/Soenneker/soenneker.blazor.drawflow" Target="Target.Blank" Title="View on GitHub" />
        </BarEnd>
    </Bar>
    <LayoutContent>
        <div class="d-flex flex-row" style="height:calc(100vh - 64px);">
            <LayoutSider Class="bg-dark text-light p-4 d-flex flex-column gap-4" Style="min-width:200px;max-width:320px;">
                <div class="toolbar">
                    <div class="toolbar-section mb-4">
                        <h3 class="text-info">Node Operations</h3>
                        <div class="d-flex flex-column gap-2">
                            <Button Color="Color.Info" Outline Class="mb-1" @onclick="AddGithubNode">GitHub Node</Button>
                            <Button Color="Color.Info" Outline Class="mb-1" @onclick="AddEmailNode">Email Node</Button>
                            <Button Color="Color.Primary" Outline Class="mb-1" @onclick="AddHtmlNode">Add HTML Node</Button>
                            <Button Color="Color.Primary" Outline Class="mb-1" @onclick="AddNodeWithData">Add Node With Data</Button>
                            <Button Color="Color.Primary" Outline Class="mb-1" @onclick="AddCustomStyledNode">Add Custom Styled Node</Button>
                        </div>
                    </div>
                    <div class="toolbar-section mb-4">
                        <h3 class="text-info">View Controls</h3>
                        <div class="d-flex flex-row gap-2 flex-wrap">
                            <Button Color="Color.Secondary" @onclick="ZoomIn">Zoom In</Button>
                            <Button Color="Color.Secondary" @onclick="ZoomOut">Zoom Out</Button>
                            <Button Color="Color.Danger" @onclick="ClearCanvas">Clear</Button>
                        </div>
                    </div>
                    <div class="toolbar-section mb-4">
                        <h3 class="text-info">Module Management</h3>
                        <div class="d-flex flex-row gap-2 flex-wrap">
                            <Button Color="Color.Warning" @onclick="AddModuleClick">Add Module</Button>
                            <Button Color="Color.Warning" @onclick="ChangeModuleClick">Change Module</Button>
                            <Button Color="Color.Warning" @onclick="RemoveModuleClick">Remove Module</Button>
                        </div>
                    </div>
                    <div class="toolbar-section mb-4">
                        <h3 class="text-info">Data Operations</h3>
                        <div class="d-flex flex-row gap-2 flex-wrap">
                            <Button Color="Color.Success" @onclick="ExportData">Export</Button>
                            <Button Color="Color.Success" @onclick="ImportData">Import</Button>
                            <Button Color="Color.Danger" @onclick="RemoveSelectedNode">Remove Selected</Button>
                            <Button Color="Color.Info" @onclick="ShowCurrentDrawflow">Show Current Drawflow JSON</Button>
                        </div>
                    </div>
                    <div class="toolbar-section mb-4">
                        <h3 class="text-info">Advanced</h3>
                        <div class="d-flex flex-row gap-2 flex-wrap">
                            <Button Color="Color.Primary" @onclick="AddNodeInput">Add Input</Button>
                            <Button Color="Color.Primary" @onclick="AddNodeOutput">Add Output</Button>
                            <Button Color="Color.Primary" @onclick="UpdateSelectedNodeData">Update Data</Button>
                            <Button Color="Color.Primary" @onclick="CreateSampleFlow">Sample Flow</Button>
                            <Button Color="Color.Primary" @onclick="TestDrawflow">Test Drawflow</Button>
                            <Button Color="Color.Primary" @onclick="AddTypedNode">Add Typed Node</Button>
                            <Button Color="Color.Primary" @onclick="AddTypedModule">Add Typed Module</Button>
                            <Button Color="Color.Primary" @onclick="ImportTypedData">Import Typed Data</Button>
                            <Button Color="Color.Primary" @onclick="ImportJsonData">Import JSON Data</Button>
                        </div>
                    </div>
                </div>
            </LayoutSider>
            <LayoutContent>
                <div style="width:100%;height:100%;min-width:600px;min-height:400px;position:relative;">
                    <Drawflow @ref="_flow"
                             Options="_options"
                             OnNodeCreated="HandleNodeCreated"
                             OnNodeRemoved="HandleNodeRemoved"
                             OnConnectionCreated="HandleConnectionCreated"
                             OnConnectionRemoved="HandleConnectionRemoved"
                             OnNodeSelected="HandleNodeSelected"
                             OnNodeUnselected="HandleNodeUnselected"
                             OnDataChanged="HandleDataChanged"
                             OnZoomChanged="HandleZoomChanged"
                             OnModuleChanged="HandleModuleChanged"
                             OnModuleAdded="HandleModuleAdded"
                             OnModuleRemoved="HandleModuleRemoved"
                             OnImport="HandleImport"
                             OnExport="HandleExport"
                             Class="drawflow-editor w-100 h-100">
                    </Drawflow>
                </div>
            </LayoutContent>
            <LayoutSider  Class="bg-dark text-light p-4 d-flex flex-column gap-4" Style="min-width:200px;max-width:400px;overflow-x:auto;">
                <div class="info-panel">
                    <div class="info-section mb-4">
                        <h3 class="text-info">Status</h3>
                        <div class="status-info">
                            <p><span>Nodes</span> <span class="badge bg-info">@_nodeCount</span></p>
                            <p><span>Connections</span> <span class="badge bg-info">@_connectionCount</span></p>
                            <p><span>Zoom</span> <span class="badge bg-info">@_currentZoom.ToString("F2")</span></p>
                            <p><span>Module</span> <span class="badge bg-info">@_currentModule</span></p>
                        </div>
                    </div>
                    <div class="info-section mb-4">
                        <h3 class="text-info">Events</h3>
                        <div class="event-log">
                            @foreach (EventLog log in _eventLogs.Take(10))
                            {
                                <div class="log-entry">
                                    <span class="log-time">@log.Timestamp.ToString("HH:mm:ss")</span>
                                    <span class="log-message">@log.Message</span>
                                </div>
                            }
                        </div>
                    </div>
                    @if (!_exportedData.IsNullOrEmpty())
                    {
                        <div class="info-section mb-4">
                            <h3 class="text-info">Exported Data</h3>
                            <textarea ReadOnly Class="export-data">@_exportedData</textarea>
                        </div>
                    }
                    @if (!_currentDrawflowJson.IsNullOrEmpty())
                    {
                        <div class="info-section mb-4">
                            <h3 class="text-info">Current Drawflow JSON</h3>
                            <textarea ReadOnly Class="export-data">@_currentDrawflowJson</textarea>
                        </div>
                    }
                    <div class="debug-panel">
                        <h4 class="text-info">Debug Info</h4>
                        <div><b>Selected Node ID(s):</b> @string.Join(", ", _selectedNodeIds)</div>
                        <Button Color="Color.Info" Class="mb-2" @onclick="ExportNodeList">Export Node List</Button>
                        <textarea ReadOnly Class="export-data mt-2" Style="min-height: 80px;">@_debugNodeList</textarea>
                    </div>
                </div>
            </LayoutSider>
        </div>
    </LayoutContent>
</Layout>

@code {
    private Drawflow? _flow;
    private readonly DrawflowOptions _options = new()
    {
        Reroute = false,
        RerouteFixCurvature = false,
        Curvature = 0.3,
        Zoom = 1.0,
        ZoomMax = 2.0,
        ZoomMin = 0.3,
        ZoomValue = 0.1,
        DraggableInputs = true,
        UseUuid = true,
        ManualCreate = false // Fix: allow Drawflow to auto-initialize
    };

    private int _nodeCount;
    private int _connectionCount;
    private double _currentZoom = 1.0;
    private string _currentModule = "Home";
    private string _exportedData = "";
    private List<string> _selectedNodeIds = new();
    private readonly List<EventLog> _eventLogs = [];
    private string _currentDrawflowJson = "";
    private string _debugNodeList = "";

    private class EventLog
    {
        public DateTime Timestamp { get; set; } = DateTime.Now;
        public string Message { get; set; } = "";
        public string Type { get; set; } = "info";
    }

    private void AddLog(string message, string type = "info")
    {
        _eventLogs.Insert(0, new EventLog { Message = message, Type = type });
        if (_eventLogs.Count > 50)
            _eventLogs.RemoveAt(_eventLogs.Count - 1);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            AddLog("Page loaded, initializing Drawflow component...", "info");
            await Task.Delay(500); // Give time for component to initialize

            // Only call Create if ManualCreate is true
            if (_flow != null && _options.ManualCreate)
            {
                try
                {
                    await _flow.Create(_options);
                    AddLog("Drawflow component created successfully!", "success");
                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    AddLog($"Error creating Drawflow: {ex.Message}", "error");
                }
            }
            else if (_flow == null)
            {
                AddLog("Drawflow component is still null", "warning");
            }
        }
    }

    private Task HandleNodeCreated(string id)
    {
        _nodeCount++;
        AddLog($"Node created: {id}", "success");
        Logger.LogInformation("Node created {Id}", id);
        return Task.CompletedTask;
    }

    private Task HandleNodeRemoved(string id)
    {
        _nodeCount = Math.Max(0, _nodeCount - 1);
        AddLog($"Node removed: {id}", "warning");
        Logger.LogInformation("Node removed {Id}", id);
        return Task.CompletedTask;
    }

    private Task HandleConnectionCreated(string data)
    {
        _connectionCount++;
        AddLog($"Connection created: {data}", "success");
        Logger.LogInformation("Connection created {Data}", data);
        return Task.CompletedTask;
    }

    private Task HandleConnectionRemoved(string data)
    {
        _connectionCount = Math.Max(0, _connectionCount - 1);
        AddLog($"Connection removed: {data}", "warning");
        Logger.LogInformation("Connection removed {Data}", data);
        return Task.CompletedTask;
    }

    private Task HandleNodeSelected(List<string> ids)
    {
        _selectedNodeIds = ids;
        AddLog($"Node(s) selected: {string.Join(", ", ids)}", "info");
        Logger.LogInformation($"Node(s) selected: {string.Join(", ", ids)}");
        return Task.CompletedTask;
    }

    private Task HandleNodeUnselected(List<string> ids)
    {
        _selectedNodeIds = _selectedNodeIds.Except(ids).ToList();
        AddLog($"Node(s) unselected: {string.Join(", ", ids)}", "info");
        Logger.LogInformation($"Node(s) unselected: {string.Join(", ", ids)}");
        return Task.CompletedTask;
    }

    private Task HandleDataChanged(string data)
    {
        // Reduce logging frequency for better performance during dragging
        if (!data.Contains("position")) // Don't log position changes
        {
            AddLog($"Data changed: {data}", "info");
        }
        Logger.LogInformation("Data changed {Data}", data);
        return Task.CompletedTask;
    }

    private Task HandleZoomChanged(string zoom)
    {
        if (double.TryParse(zoom, out double zoomValue))
        {
            _currentZoom = zoomValue;
            AddLog($"Zoom changed: {zoomValue:F2}", "info");
        }
        Logger.LogInformation("Zoom changed {Zoom}", zoom);
        return Task.CompletedTask;
    }

    private Task HandleModuleChanged(string module)
    {
        _currentModule = module;
        AddLog($"Module changed: {module}", "info");
        Logger.LogInformation("Module changed {Module}", module);
        return Task.CompletedTask;
    }

    private Task HandleModuleAdded(string module)
    {
        AddLog($"Module added: {module}", "success");
        Logger.LogInformation("Module added {Module}", module);
        return Task.CompletedTask;
    }

    private Task HandleModuleRemoved(string module)
    {
        AddLog($"Module removed: {module}", "warning");
        Logger.LogInformation("Module removed {Module}", module);
        return Task.CompletedTask;
    }

    private Task HandleImport(string data)
    {
        AddLog($"Data imported", "success");
        Logger.LogInformation("Data imported");
        return Task.CompletedTask;
    }

    private Task HandleExport(string data)
    {
        AddLog($"Data exported", "success");
        Logger.LogInformation("Data exported");
        return Task.CompletedTask;
    }

    private async Task AddGithubNode()
    {
        if (_flow != null)
        {
            await _flow.AddNode("github", 1, 1, 150, 150, "github", 
                new { name = "GitHub", icon = "🐙" }, 
                "<div class='node-content'><span class='node-title'>GitHub</span></div>");
        }
    }

    private async Task AddFacebookNode()
    {
        if (_flow != null)
        {
            await _flow.AddNode("facebook", 1, 1, 300, 150, "facebook", 
                new { name = "Facebook", icon = "📘" }, 
                "<div class='node-content'><span class='node-title'>Facebook</span></div>");
        }
    }

    private async Task AddSlackNode()
    {
        if (_flow != null)
        {
            await _flow.AddNode("slack", 1, 1, 450, 150, "slack", 
                new { name = "Slack", icon = "💬" }, 
                "<div class='node-content'><span class='node-title'>Slack</span></div>");
        }
    }

    private async Task AddTelegramNode()
    {
        if (_flow != null)
        {
            await _flow.AddNode("telegram", 1, 1, 150, 300, "telegram", 
                new { name = "Telegram", icon = "📱" }, 
                "<div class='node-content'><span class='node-title'>Telegram</span></div>");
        }
    }

    private async Task AddAWSNode()
    {
        if (_flow != null)
        {
            await _flow.AddNode("aws", 1, 1, 300, 300, "aws", 
                new { name = "AWS", icon = "☁️" }, 
                "<div class='node-content'><span class='node-title'>AWS</span></div>");
        }
    }

    private async Task AddFileLogNode()
    {
        if (_flow != null)
        {
            await _flow.AddNode("filelog", 1, 1, 450, 300, "filelog", 
                new { name = "File Log", icon = "📄" }, 
                "<div class='node-content'><span class='node-title'>File Log</span></div>");
        }
    }

    private async Task AddGoogleDriveNode()
    {
        if (_flow != null)
        {
            await _flow.AddNode("googledrive", 1, 1, 150, 450, "googledrive", 
                new { name = "Google Drive", icon = "📁" }, 
                "<div class='node-content'><span class='node-title'>Google Drive</span></div>");
        }
    }

    private async Task AddEmailNode()
    {
        if (_flow != null)
        {
            await _flow.AddNode("email", 1, 1, 300, 450, "email", 
                new { name = "Email", icon = "📧" }, 
                "<div class='node-content'><span class='node-title'>Email</span></div>");
        }
    }

    private async Task AddHtmlNode()
    {
        if (_flow != null)
        {
            string html = "<div style='padding:10px; background:#e0f7fa; border-radius:8px;'><b>HTML Node</b><br/><i>This node uses raw HTML!</i></div>";
            string jsonData = JsonSerializer.Serialize(new { label = "HTML Node" });
            await _flow.AddNode("htmlnode", 1, 1, 200, 300, "htmlnode", jsonData, html);
        }
    }

    private async Task AddNodeWithData()
    {
        if (_flow != null)
        {
            var data = new { label = "Data Node", value = 42, description = "This node has a data payload." };
            string html = $"<div class='node-content'><span class='node-title'>Node With Data</span><br/><span style='font-size:0.9em;'>{data.value}</span></div>";
            string jsonData = JsonSerializer.Serialize(data);
            await _flow.AddNode("datanode", 1, 1, 350, 300, "datanode", jsonData, html);
        }
    }

    private async Task AddCustomStyledNode()
    {
        if (_flow != null)
        {
            string html = "<div style='padding:12px; background:linear-gradient(90deg,#ffecd2 0%,#fcb69f 100%); border-radius:10px; color:#333;'><b>Custom Styled Node</b><br/><span style='font-size:0.9em;'>Gradient background, rounded corners, and more!</span></div>";
            string jsonData = JsonSerializer.Serialize(new { label = "Custom Styled" });
            await _flow.AddNode("customstyled", 2, 2, 500, 300, "customstyled", jsonData, html);
        }
    }

    private async Task ZoomIn()
    {
        if (_flow != null)
            await _flow.ZoomIn();
    }

    private async Task ZoomOut()
    {
        if (_flow != null)
            await _flow.ZoomOut();
    }

    private async Task ClearCanvas()
    {
        if (_flow != null)
        {
            await _flow.Clear();
            _nodeCount = 0;
            _connectionCount = 0;
            AddLog("Canvas cleared", "warning");
        }
    }

    private async Task AddModuleClick()
    {
        if (_flow != null)
            await _flow.AddModule("Other");
    }

    private async Task ChangeModuleClick()
    {
        if (_flow != null)
            await _flow.ChangeModule("Other");
    }

    private async Task RemoveModuleClick()
    {
        if (_flow != null)
            await _flow.RemoveModule("Other");
    }

    private async Task ExportData()
    {
        if (_flow != null)
        {
            _exportedData = await _flow.ExportAsJson();
            AddLog("Data exported successfully", "success");
        }
    }

    private async Task ImportData()
    {
        if (_flow != null && !_exportedData.IsNullOrEmpty())
        {
            await _flow.Import(_exportedData);
            AddLog("Data imported successfully", "success");
        }
    }

    private async Task RemoveSelectedNode()
    {
        if (_flow != null && _selectedNodeIds.Count > 0)
        {
            AddLog($"Attempting to remove node(s): {string.Join(", ", _selectedNodeIds)}", "warning");
            Logger.LogInformation($"Attempting to remove node(s): {string.Join(", ", _selectedNodeIds)}");

            foreach (string id in _selectedNodeIds)
            {
                await _flow.RemoveNode(id);
            }

            AddLog($"RemoveNode called for: {string.Join(", ", _selectedNodeIds)}", "warning");
            Logger.LogInformation($"RemoveNode called for: {string.Join(", ", _selectedNodeIds)}");
            _selectedNodeIds.Clear();
            // Force export after removal to verify node list
            if (_flow != null)
                _debugNodeList = await _flow.ExportAsJson();
            StateHasChanged();
        }
        else
        {
            AddLog("No node selected for removal", "warning");
            Logger.LogWarning("No node selected for removal");
        }
    }

    private async Task AddNodeInput()
    {
        if (_flow != null && _selectedNodeIds.Count > 0)
        {
            foreach (string id in _selectedNodeIds)
                await _flow.AddNodeInput(id);
            AddLog($"Added input to node(s): {string.Join(", ", _selectedNodeIds)}", "success");
        }
        else
        {
            AddLog("Please select a node first", "warning");
        }
    }

    private async Task AddNodeOutput()
    {
        if (_flow != null && _selectedNodeIds.Count > 0)
        {
            foreach (string id in _selectedNodeIds)
                await _flow.AddNodeOutput(id);
            AddLog($"Added output to node(s): {string.Join(", ", _selectedNodeIds)}", "success");
        }
        else
        {
            AddLog("Please select a node first", "warning");
        }
    }

    private async Task UpdateSelectedNodeData()
    {
        if (_flow != null && _selectedNodeIds.Count > 0)
        {
            var newData = new { 
                name = "Updated Node", 
                icon = "🔄", 
                timestamp = DateTime.Now.ToString("HH:mm:ss"),
                updated = true 
            };
            foreach (string id in _selectedNodeIds)
                await _flow.UpdateNodeData(id, newData);
            AddLog($"Updated node data: {string.Join(", ", _selectedNodeIds)}", "success");
        }
        else
        {
            AddLog("Please select a node first", "warning");
        }
    }

    private async Task CreateSampleFlow()
    {
        if (_flow != null)
        {
            AddLog("Creating sample workflow...", "info");

            await _flow.Clear();
            _nodeCount = 0;
            _connectionCount = 0;

            // Add nodes
            await _flow.AddNode("github", 0, 1, 100, 100, "github", new { name = "GitHub", icon = "🐙" }, "<div class='node-content'><span class='node-title'>GitHub</span></div>");
            await _flow.AddNode("slack", 1, 1, 300, 100, "slack", new { name = "Slack", icon = "💬" }, "<div class='node-content'><span class='node-title'>Slack</span></div>");
            await _flow.AddNode("email", 1, 0, 500, 100, "email", new { name = "Email", icon = "📧" }, "<div class='node-content'><span class='node-title'>Email</span></div>");

            // Retrieve actual node IDs by name
            List<string> githubIds = await _flow.GetNodesFromName("github");
            List<string> slackIds = await _flow.GetNodesFromName("slack");
            List<string> emailIds = await _flow.GetNodesFromName("email");

            string? githubId = githubIds.FirstOrDefault();
            string? slackId = slackIds.FirstOrDefault();
            string? emailId = emailIds.FirstOrDefault();

            // Add connections using actual node IDs and correct port names
            if (!githubId.IsNullOrEmpty() && !slackId.IsNullOrEmpty())
                await _flow.AddConnection(githubId, slackId, "output_1", "input_1");
            if (!slackId.IsNullOrEmpty() && !emailId.IsNullOrEmpty())
                await _flow.AddConnection(slackId, emailId, "output_1", "input_1");

            AddLog("Created sample workflow", "success");
        }
        else
        {
            AddLog("Drawflow component is null - not initialized", "error");
        }
    }

    private async Task TestDrawflow()
    {
        AddLog("Testing Drawflow component...", "info");
        
        if (_flow == null)
        {
            AddLog("Drawflow component is null", "error");
            return;
        }

        try
        {
            // Try to create a simple node
            await _flow.AddNode("test", 1, 1, 200, 200, "test", 
                new { name = "Test Node" }, 
                "<div class='node-content'><span class='node-title'>Test Node</span></div>");
            
            AddLog("Test node created successfully!", "success");
        }
        catch (Exception ex)
        {
            AddLog($"Error creating test node: {ex.Message}", "error");
        }
    }

    private async Task ShowCurrentDrawflow()
    {
        if (_flow != null)
        {
            _currentDrawflowJson = await _flow.ExportAsJson();
            StateHasChanged();
        }
    }

    private async Task ExportNodeList()
    {
        if (_flow != null)
            _debugNodeList = await _flow.ExportAsJson();
        StateHasChanged();
    }

    private async Task AddTypedNode()
    {
        if (_flow != null)
        {
            var node = new DrawflowNode
            {
                Name = "TypedNode",
                PosX = 400,
                PosY = 200,
                Class = "typed-node",
                Html = "<div class='node-content'><span class='node-title'>Typed Node</span><br/><span style='font-size:0.9em;'>Created with strongly-typed DrawflowNode</span></div>",
                Data = new Dictionary<string, object>
                {
                    ["name"] = "Typed Node",
                    ["icon"] = "🔧",
                    ["created"] = DateTime.Now.ToString("HH:mm:ss"),
                    ["type"] = "strongly-typed"
                }
            };

            await _flow.AddNode(node);
            AddLog("Added strongly-typed node", "success");
        }
    }

    private async Task AddTypedModule()
    {
        if (_flow != null)
        {
            var module = new DrawflowModule
            {
                Data = new Dictionary<string, DrawflowNode>
                {
                    ["typed-node-1"] = new DrawflowNode
                    {
                        Name = "TypedNode1",
                        PosX = 100,
                        PosY = 100,
                        Class = "typed-module-node",
                        Html = "<div class='node-content'><span class='node-title'>Module Node 1</span></div>",
                        Data = new Dictionary<string, object> { ["module"] = "typed" }
                    },
                    ["typed-node-2"] = new DrawflowNode
                    {
                        Name = "TypedNode2",
                        PosX = 300,
                        PosY = 100,
                        Class = "typed-module-node",
                        Html = "<div class='node-content'><span class='node-title'>Module Node 2</span></div>",
                        Data = new Dictionary<string, object> { ["module"] = "typed" }
                    }
                }
            };

            await _flow.AddModule("TypedModule", module);
            AddLog("Added strongly-typed module with nodes", "success");
        }
    }

    private async Task ImportTypedData()
    {
        if (_flow != null)
        {
            var drawflowExport = new DrawflowExport
            {
                Drawflow = new Dictionary<string, DrawflowModule>
                {
                    ["ImportedModule"] = new DrawflowModule
                    {
                        Data = new Dictionary<string, DrawflowNode>
                        {
                            ["imported-node-1"] = new DrawflowNode
                            {
                                Name = "ImportedNode1",
                                PosX = 200,
                                PosY = 300,
                                Class = "imported-node",
                                Html = "<div class='node-content'><span class='node-title'>Imported Node 1</span><br/><span style='font-size:0.9em;'>Created via Import with DrawflowExport</span></div>",
                                Data = new Dictionary<string, object>
                                {
                                    ["name"] = "Imported Node 1",
                                    ["icon"] = "📥",
                                    ["imported"] = DateTime.Now.ToString("HH:mm:ss"),
                                    ["method"] = "Import"
                                }
                            },
                            ["imported-node-2"] = new DrawflowNode
                            {
                                Name = "ImportedNode2",
                                PosX = 400,
                                PosY = 300,
                                Class = "imported-node",
                                Html = "<div class='node-content'><span class='node-title'>Imported Node 2</span><br/><span style='font-size:0.9em;'>Created via Import with DrawflowExport</span></div>",
                                Data = new Dictionary<string, object>
                                {
                                    ["name"] = "Imported Node 2",
                                    ["icon"] = "📥",
                                    ["imported"] = DateTime.Now.ToString("HH:mm:ss"),
                                    ["method"] = "Import"
                                }
                            }
                        }
                    }
                }
            };

            await _flow.Import(drawflowExport);
            AddLog("Imported strongly-typed data", "success");
        }
    }

    private async Task ImportJsonData()
    {
        if (_flow != null)
        {
            string jsonData = @"{
                ""drawflow"": {
                    ""JsonModule"": {
                        ""data"": {
                            ""json-node-1"": {
                                ""id"": ""json-node-1"",
                                ""name"": ""JsonNode1"",
                                ""pos_x"": 250,
                                ""pos_y"": 400,
                                ""class"": ""json-node"",
                                ""html"": ""<div class='node-content'><span class='node-title'>JSON Node 1</span><br/><span style='font-size:0.9em;'>Created via Import with JSON string</span></div>"",
                                ""data"": {
                                    ""name"": ""JSON Node 1"",
                                    ""icon"": ""📄"",
                                    ""imported"": """ + DateTime.Now.ToString("HH:mm:ss") + @""",
                                    ""method"": ""Import JSON""
                                }
                            }
                        }
                    }
                }
            }";

            await _flow.Import(jsonData);
            AddLog("Imported JSON data", "success");
        }
    }
}
