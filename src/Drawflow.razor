@using System.Text.Json
@using System.Threading
@using Microsoft.Extensions.Logging
@using Microsoft.JSInterop
@using Soenneker.Blazor.Drawflow.Abstract
@using Soenneker.Blazor.Drawflow.Dtos
@using Soenneker.Blazor.Drawflow.Options
@using Soenneker.Extensions.Task
@using Soenneker.Extensions.ValueTask
@using Soenneker.Extensions.String
@using Soenneker.Utils.Json

@inject IDrawflowInterop DrawflowInterop
@inject ILogger<Drawflow> _logger

@implements IDrawflow

<div id="@_observerId"></div>
<div id="@_wrapperId">
    <div id="@_elementId" @attributes="Attributes"></div>
</div>

@code {
    private readonly string _elementGuid;
    private readonly string _observerId;
    private readonly string _wrapperId;
    private readonly string _elementId;

    private readonly CancellationTokenSource _cTs;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? Attributes { get; set; }

    [Parameter]
    public DrawflowOptions? Options { get; set; }

    [Parameter]
    public EventCallback<string> OnNodeCreated { get; set; }

    [Parameter]
    public EventCallback<string> OnNodeRemoved { get; set; }

    [Parameter]
    public EventCallback<string> OnConnectionCreated { get; set; }

    [Parameter]
    public EventCallback<string> OnConnectionRemoved { get; set; }

    [Parameter]
    public EventCallback<string> OnModuleChanged { get; set; }

    [Parameter]
    public EventCallback<string> OnModuleAdded { get; set; }

    [Parameter]
    public EventCallback<string> OnModuleRemoved { get; set; }

    [Parameter]
    public EventCallback<List<string>> OnNodeSelected { get; set; }

    [Parameter]
    public EventCallback<List<string>> OnNodeUnselected { get; set; }

    [Parameter]
    public EventCallback<string> OnConnectionSelected { get; set; }

    [Parameter]
    public EventCallback<string> OnConnectionUnselected { get; set; }

    [Parameter]
    public EventCallback<string> OnDataChanged { get; set; }

    [Parameter]
    public EventCallback<string> OnZoomChanged { get; set; }

    [Parameter]
    public EventCallback<string> OnReroute { get; set; }

    [Parameter]
    public EventCallback<string> OnTranslated { get; set; }

    [Parameter]
    public EventCallback<string> OnImport { get; set; }

    [Parameter]
    public EventCallback<string> OnExport { get; set; }

    private bool _initializing;
    private bool _initialized;

    private int _nodeCount = 0;
    private int _connectionCount = 0;
    private double _currentZoom = 1.0;
    private string _currentModule = "Home";
    private string _exportedData = "";
    private string _selectedNodeId = "";
    private readonly List<EventLog> _eventLogs = [];
    private string _currentDrawflowJson = "";
    private string _debugNodeList = "";

    private class EventLog
    {
        public DateTime Timestamp { get; set; } = DateTime.Now;
        public string Message { get; set; } = "";
        public string Type { get; set; } = "info";
    }

    private void AddLog(string message, string type = "info")
    {
        _eventLogs.Insert(0, new EventLog { Message = message, Type = type });
        if (_eventLogs.Count > 50)
            _eventLogs.RemoveAt(_eventLogs.Count - 1);
    }

    public Drawflow()
    {
        _initializing = false;
        _initialized = false;
        _elementGuid = Guid.NewGuid().ToString("N");
        _observerId = $"df-observer-{_elementGuid}";
        _wrapperId = $"df-wrapper-{_elementGuid}";
        _elementId = $"df-interop-{_elementGuid}";
        _cTs = new CancellationTokenSource();
    }

    protected override async Task OnInitializedAsync()
    {
        await DrawflowInterop.Initialize(Options?.UseCdn ?? true, _cTs.Token).NoSync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Options is {ManualCreate: true})
            {
                return;
            }

            await Create(cancellationToken: _cTs.Token).NoSync();
            await DrawflowInterop.CreateObserver(_observerId, _cTs.Token).NoSync();
        }
    }

    public async ValueTask Create(DrawflowOptions? options = null, CancellationToken cancellationToken = default)
    {
        if (_initialized || _initializing)
        {
            _logger.LogError("Drawflow 'Create' cannot be called multiple times without destroying the instance first");
            return;
        }

        _initializing = true;

        if (options != null)
            Options = options;

        //InteropEventListener.Initialize(DrawflowInterop);

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await DrawflowInterop.Create(_elementId, Options, linkedCts.Token).NoSync();

        await AddEventListeners(linkedCts.Token).NoSync();

        _initialized = true;
        _initializing = false;
    }

    private async ValueTask AddEventListeners(CancellationToken cancellationToken)
    {
        if (OnNodeCreated.HasDelegate)
            await DrawflowInterop.AddEventListener(_elementId, "nodeCreated", OnNodeCreated, cancellationToken).NoSync();

        if (OnNodeRemoved.HasDelegate)
            await DrawflowInterop.AddEventListener(_elementId, "nodeRemoved", OnNodeRemoved, cancellationToken).NoSync();

        if (OnConnectionCreated.HasDelegate)
            await DrawflowInterop.AddEventListener(_elementId, "connectionCreated", OnConnectionCreated, cancellationToken).NoSync();

        if (OnConnectionRemoved.HasDelegate)
            await DrawflowInterop.AddEventListener(_elementId, "connectionRemoved", OnConnectionRemoved, cancellationToken).NoSync();

        if (OnModuleChanged.HasDelegate)
            await DrawflowInterop.AddEventListener(_elementId, "moduleChanged", OnModuleChanged, cancellationToken).NoSync();

        if (OnModuleAdded.HasDelegate)
            await DrawflowInterop.AddEventListener(_elementId, "moduleAdded", OnModuleAdded, cancellationToken).NoSync();

        if (OnModuleRemoved.HasDelegate)
            await DrawflowInterop.AddEventListener(_elementId, "moduleRemoved", OnModuleRemoved, cancellationToken).NoSync();

        if (OnNodeSelected.HasDelegate)
            await DrawflowInterop.AddEventListener(_elementId, "nodeSelected", WrapListStringCallback(OnNodeSelected), cancellationToken).NoSync();

        if (OnNodeUnselected.HasDelegate)
            await DrawflowInterop.AddEventListener(_elementId, "nodeUnselected", WrapListStringCallback(OnNodeUnselected), cancellationToken).NoSync();

        if (OnConnectionSelected.HasDelegate)
            await DrawflowInterop.AddEventListener(_elementId, "connectionSelected", OnConnectionSelected, cancellationToken).NoSync();

        if (OnConnectionUnselected.HasDelegate)
            await DrawflowInterop.AddEventListener(_elementId, "connectionUnselected", OnConnectionUnselected, cancellationToken).NoSync();

        if (OnDataChanged.HasDelegate)
            await DrawflowInterop.AddEventListener(_elementId, "dataChanged", OnDataChanged, cancellationToken).NoSync();

        if (OnZoomChanged.HasDelegate)
            await DrawflowInterop.AddEventListener(_elementId, "zoomChanged", OnZoomChanged, cancellationToken).NoSync();

        if (OnReroute.HasDelegate)
            await DrawflowInterop.AddEventListener(_elementId, "reroute", OnReroute, cancellationToken).NoSync();

        if (OnTranslated.HasDelegate)
            await DrawflowInterop.AddEventListener(_elementId, "translated", OnTranslated, cancellationToken).NoSync();

        if (OnImport.HasDelegate)
            await DrawflowInterop.AddEventListener(_elementId, "import", OnImport, cancellationToken).NoSync();

        if (OnExport.HasDelegate)
            await DrawflowInterop.AddEventListener(_elementId, "export", OnExport, cancellationToken).NoSync();
    }

    private static List<string> ParseIdList(string json)
    {
        if (json.IsNullOrWhiteSpace())
            return [];

        try
        {
            using JsonDocument doc = JsonDocument.Parse(json);
            if (doc.RootElement.ValueKind is JsonValueKind.True or JsonValueKind.False)
            {
                // Drawflow sent a boolean, not an id or array
                return [];
            }
            if (doc.RootElement.ValueKind == JsonValueKind.Array)
            {
                var list = new List<string>();
                foreach (JsonElement el in doc.RootElement.EnumerateArray())
                {
                    if (el.ValueKind == JsonValueKind.String)
                        list.Add(el.GetString()!);
                }
                return list;
            }
            if (doc.RootElement.ValueKind == JsonValueKind.String)
            {
                return [doc.RootElement.GetString()!];
            }
        }
        catch
        {
            // fallback: treat as single string
            return [json];
        }
        return [];
    }

    private EventCallback<string> WrapListStringCallback(EventCallback<List<string>> callback)
    {
        return EventCallback.Factory.Create<string>(this, (json) =>
        {
            List<string> ids = ParseIdList(json);
            return callback.InvokeAsync(ids);
        });
    }

    public async ValueTask AddNode(string name, int inputs, int outputs, int posX, int posY, string className, object? data, string html, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        object? dataToSend = data;

        if (data is not null && data is not string)
            dataToSend = JsonUtil.Serialize(data);

        await DrawflowInterop.AddNode(_elementId, name, inputs, outputs, posX, posY, className, dataToSend, html, linkedCts.Token).NoSync();
    }

    public async ValueTask AddNode(DrawflowNode node, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await DrawflowInterop.AddNode(_elementId, node, linkedCts.Token).NoSync();
    }

    public async ValueTask AddConnection(string outputNode, string inputNode, string outputClass, string inputClass, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await DrawflowInterop.AddConnection(_elementId, outputNode, inputNode, outputClass, inputClass, linkedCts.Token).NoSync();
    }

    public async ValueTask RemoveNode(string nodeId, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await DrawflowInterop.RemoveNode(_elementId, nodeId, linkedCts.Token).NoSync();
    }

    public async ValueTask RemoveConnectionNodeId(string nodeId, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await DrawflowInterop.RemoveConnectionNodeId(_elementId, nodeId, linkedCts.Token).NoSync();
    }

    public async ValueTask<IJSObjectReference?> GetNodeFromId(string id, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        return await DrawflowInterop.GetNodeFromId(_elementId, id, linkedCts.Token).NoSync();
    }

    public async ValueTask<List<string>> GetNodesFromName(string name, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        return await DrawflowInterop.GetNodesFromName(_elementId, name, linkedCts.Token).NoSync();
    }

    public async ValueTask UpdateNodeData(string id, object data, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await DrawflowInterop.UpdateNodeData(_elementId, id, data, linkedCts.Token).NoSync();
    }

    public async ValueTask UpdateConnectionNodes(string id, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await DrawflowInterop.UpdateConnectionNodes(_elementId, id, linkedCts.Token).NoSync();
    }

    public async ValueTask<string?> GetModuleFromNodeId(string id, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        return await DrawflowInterop.GetModuleFromNodeId(_elementId, id, linkedCts.Token).NoSync();
    }

    public async ValueTask ClearModuleSelected(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await DrawflowInterop.ClearModuleSelected(_elementId, linkedCts.Token).NoSync();
    }

    public async ValueTask<string> ExportAsJson(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        return await DrawflowInterop.ExportAsJson(_elementId, linkedCts.Token).NoSync();
    }

    public async ValueTask<DrawflowExport> Export(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        return await DrawflowInterop.Export(_elementId, linkedCts.Token).NoSync();
    }

    public async ValueTask Import(string json, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await DrawflowInterop.Import(_elementId, json, linkedCts.Token).NoSync();
    }

    public async ValueTask Import(DrawflowExport drawflowExport, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await DrawflowInterop.Import(_elementId, drawflowExport, linkedCts.Token).NoSync();
    }

    public async ValueTask ZoomIn(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await DrawflowInterop.ZoomIn(_elementId, linkedCts.Token).NoSync();
    }

    public async ValueTask ZoomOut(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await DrawflowInterop.ZoomOut(_elementId, linkedCts.Token).NoSync();
    }

    public async ValueTask AddModule(string name, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await DrawflowInterop.AddModule(_elementId, name, linkedCts.Token).NoSync();
    }

    public async ValueTask AddModule(string moduleName, DrawflowModule module, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await DrawflowInterop.AddModule(_elementId, moduleName, module, linkedCts.Token).NoSync();
    }

    public async ValueTask ChangeModule(string name, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await DrawflowInterop.ChangeModule(_elementId, name, linkedCts.Token).NoSync();
    }

    public async ValueTask RemoveModule(string name, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await DrawflowInterop.RemoveModule(_elementId, name, linkedCts.Token).NoSync();
    }

    public async ValueTask AddNodeInput(string id, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await DrawflowInterop.AddNodeInput(_elementId, id, linkedCts.Token).NoSync();
    }

    public async ValueTask AddNodeOutput(string id, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await DrawflowInterop.AddNodeOutput(_elementId, id, linkedCts.Token).NoSync();
    }

    public async ValueTask RemoveNodeInput(string id, string inputClass, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await DrawflowInterop.RemoveNodeInput(_elementId, id, inputClass, linkedCts.Token).NoSync();
    }

    public async ValueTask RemoveNodeOutput(string id, string outputClass, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await DrawflowInterop.RemoveNodeOutput(_elementId, id, outputClass, linkedCts.Token).NoSync();
    }

    public async ValueTask RemoveSingleConnection(string outId, string inId, string outClass, string inClass, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await DrawflowInterop.RemoveSingleConnection(_elementId, outId, inId, outClass, inClass, linkedCts.Token).NoSync();
    }

    public async ValueTask Clear(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await DrawflowInterop.Clear(_elementId, linkedCts.Token).NoSync();
    }

    public async ValueTask SetZoom(double zoom, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await DrawflowInterop.SetZoom(_elementId, zoom, linkedCts.Token).NoSync();
    }

    public async ValueTask<double> GetZoom(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        return await DrawflowInterop.GetZoom(_elementId, linkedCts.Token).NoSync();
    }

    public async ValueTask CenterNode(string id, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await DrawflowInterop.CenterNode(_elementId, id, linkedCts.Token).NoSync();
    }

    public async ValueTask<object> GetNodePosition(string id, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        return await DrawflowInterop.GetNodePosition(_elementId, id, linkedCts.Token).NoSync();
    }

    public async ValueTask SetNodePosition(string id, int posX, int posY, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await DrawflowInterop.SetNodePosition(_elementId, id, posX, posY, linkedCts.Token).NoSync();
    }

    public async ValueTask<string> GetNodeHtml(string id, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        return await DrawflowInterop.GetNodeHtml(_elementId, id, linkedCts.Token).NoSync();
    }

    public async ValueTask SetNodeHtml(string id, string html, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await DrawflowInterop.SetNodeHtml(_elementId, id, html, linkedCts.Token).NoSync();
    }

    public async ValueTask<string> GetNodeClass(string id, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        return await DrawflowInterop.GetNodeClass(_elementId, id, linkedCts.Token).NoSync();
    }

    public async ValueTask SetNodeClass(string id, string className, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await DrawflowInterop.SetNodeClass(_elementId, id, className, linkedCts.Token).NoSync();
    }

    public async ValueTask<string> GetNodeName(string id, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        return await DrawflowInterop.GetNodeName(_elementId, id, linkedCts.Token).NoSync();
    }

    public async ValueTask SetNodeName(string id, string name, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await DrawflowInterop.SetNodeName(_elementId, id, name, linkedCts.Token).NoSync();
    }

    public async ValueTask<List<object>> GetNodeConnections(string id, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        return await DrawflowInterop.GetNodeConnections(_elementId, id, linkedCts.Token).NoSync();
    }

    public async ValueTask<bool> IsNodeSelected(string id, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        return await DrawflowInterop.IsNodeSelected(_elementId, id, linkedCts.Token).NoSync();
    }

    public async ValueTask SelectNode(string id, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await DrawflowInterop.SelectNode(_elementId, id, linkedCts.Token).NoSync();
    }

    public async ValueTask UnselectNode(string id, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await DrawflowInterop.UnselectNode(_elementId, id, linkedCts.Token).NoSync();
    }

    public async ValueTask<List<string>> GetSelectedNodes(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        return await DrawflowInterop.GetSelectedNodes(_elementId, linkedCts.Token).NoSync();
    }

    public async ValueTask ClearSelectedNodes(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await DrawflowInterop.ClearSelectedNodes(_elementId, linkedCts.Token).NoSync();
    }

    public async ValueTask<string> GetCurrentModule(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        return await DrawflowInterop.GetCurrentModule(_elementId, linkedCts.Token).NoSync();
    }

    public async ValueTask<List<string>> GetModules(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        return await DrawflowInterop.GetModules(_elementId, linkedCts.Token).NoSync();
    }

    public async ValueTask<bool> IsEditMode(CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        return await DrawflowInterop.IsEditMode(_elementId, linkedCts.Token).NoSync();
    }

    public async ValueTask SetEditMode(bool editMode, CancellationToken cancellationToken = default)
    {
        if (!_initialized)
            throw new InvalidOperationException("Drawflow is not initialized.");

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await DrawflowInterop.SetEditMode(_elementId, editMode, linkedCts.Token).NoSync();
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            await _cTs.CancelAsync().NoSync();
            if (_initialized)
            {
                await DrawflowInterop.Destroy(_elementId, _cTs.Token).NoSync();
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error disposing Drawflow");
        }
        finally
        {
            _cTs.Dispose();
        }
    }
}
